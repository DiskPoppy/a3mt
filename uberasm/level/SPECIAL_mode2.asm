; Mode 2 "fisheye" effect, similar to the icy section in YUMP 2's Yellow Switch Palace.
; Sources:
; https://smwc.me/1114876
; https://sneslab.net/wiki/Offset_Change_Mode
; https://nesdoug.com/2022/05/30/other-modes/

; Needs to be the same free RAM address as in RequestRetry.asm.
!RetryRequested = $18D8|!addr

init:
	LDA #$02		;\ Activate Mode 2.
	STA $3E			;/

	LDA #$80		;\ Increment VRAM address after writing to $2119.
	STA $2115		;/ This includes writing to $2118 in 16-bit mode.
	REP #$20
	LDA #$5000		;\ Set the VRAM address for the Layer 3 tilemap.
	STA $2116		;/ This tilemap encodes the offset per tile for Mode 2.
	LDX #$00
.loop
	LDA h_offsets,x	;\ Upload all of the Layer 3 tilemap offsets into VRAM.
	STA $2118		;/
	INX #2			;> 16-bit mode, so need to increment twice.
	CPX #$80		;> Finish when all 128 bytes have been uploaded.
	BNE .loop
	SEP #$20

	; Window the screen to mask out the glitchiness of the offset tiles.
	; Generated by Effect Tool 3.0.
	LDA #$15		;\ BG1, BG3, OBJ on main screen (TM)
	STA $212C		;|
	LDA #$15		;| BG1, BG3, OBJ on main screen should use windowing. (TMW)
	STA $212E		;/
	LDA #$02		;\ BG2 on sub screen (TS)
	STA $212D		;|
	LDA #$02		;| BG2 on sub screen should use windowing. (TSW)
	STA $212F		;/
	LDA #$20		;> Backdrop for color math
	STA $40			;> mirror of $2131
	LDA #$A2		;\ Clip to black: Inside, Prevent colot math: Inside
	STA $44			;/ Add subscreen instead of fixed color: True
	LDA #$AA		;\ values for enabling/inverting BG1/BG2 on window 1/2
	STA $41			;| mirror of $2123
	STA $42			;| mirror of $2124
	STA $43			;| mirror of $2125
					;| Window 1 enabled on BG1, BG2, BG3, BG4, OBJ, Color
					;| Window 2 enabled on BG1, BG2, BG3, BG4, OBJ, Color
					;| Window 1 inverted on 0
					;/ Window 2 inverted on 0

	REP #$20				;\ Get into 16 bit mode
	LDA #$2604				;| Register $2126 using mode 4
	STA $4330				;| 4330 = transfer mode, 4331 = register
	LDA #.windowTable		;| High byte and low byte of table addresse.
	STA $4332				;| 4332 = low byte, 4333 = high byte
	SEP #$20				;| Back to 8 bit mode
	LDA.b #.windowTable>>16	;| Bank byte of table addresse.
	STA $4334				;/ = bank byte
	LDA #$08				;\ enable HDMA channel 3
	TSB $0D9F|!addr			;/

	JSL RequestRetry_init

	RTL

.windowTable:
	db $80 : db $00, $08, $F8, $FF
	db $60 : db $00, $08, $F8, $FF
	db $00

main:
	LDA #$52		;\ Apply the offsets by passing the VRAM address of the tilemap...
	STA $2109		;/
	STZ $2111		;\ ...then the starting indices of the horizontal/vertical offset tables.
	STZ $2112		;/

	; Exit out of SPECIAL rooms with a special button combination (A+X+L+R).
	LDA #%11110000 : STA $00
	JSL RequestRetry_main
	LDA !RetryRequested
	BNE .return

	; Disable L and R buttons.
	LDA #%00000000 : STA $00
	LDA #%00110000 : STA $01
	JSL DisableButton_main

	; Otherwise, the SPECIAL rooms will reload upon death.
	LDA $010B|!addr
	STA $0C
	LDA $010C|!addr
	ORA #$04
	STA $0D
	JSL MultipersonReset_main
.return
	RTL

; Table of horizontal and vertical offsets, imported from YUMP 2's Yellow Switch Palace.
; Each pair of bytes is in the format D21---OO OOOOOOOO,
; where D is the direction (0 = horizontal, 1 = vertical),
; 2 and 1 are the affected background layers (0 = disabled, 1 = enabled),
; and the O bits are the offsets.
; The first byte in the pair is the low byte, followed by the high byte.

; Horizontal offsets, 64 bytes.
h_offsets:
	db $0A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Vertical offsets, 64 bytes.
v_offsets:
	db $A5,$20,$AA,$20,$AE,$20,$B2,$20,$B5,$20,$B8,$20,$BA,$20,$BB,$20
	db $BC,$20,$BD,$20,$BE,$20,$BE,$20,$C0,$20,$C0,$20,$C0,$20,$C0,$20
	db $C0,$20,$C0,$20,$BF,$20,$BE,$20,$BE,$20,$BD,$20,$BC,$20,$BB,$20
	db $BA,$20,$B8,$20,$B5,$20,$B2,$20,$AE,$20,$AA,$20,$A5,$20,$E5,$EA
